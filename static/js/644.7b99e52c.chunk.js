!function(){"use strict";function e(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function t(t,n){if(t){if("string"===typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}function n(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!==typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(u){s=!0,a=u}finally{try{i||null==n.return||n.return()}finally{if(s)throw a}}return o}}(e,n)||t(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,n){var r="undefined"!==typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=t(e))||n&&e&&"number"===typeof e.length){r&&(e=r);var a=0,o=function(){};return{s:o,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,u=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return s=e.done,e},e:function(e){u=!0,i=e},f:function(){try{s||null==r.return||r.return()}finally{if(u)throw i}}}}function a(n){return function(t){if(Array.isArray(t))return e(t)}(n)||function(e){if("undefined"!==typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||t(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var u=function(){function e(t,n,r,a,i){o(this,e),this.typeName=void 0,this.rawExpression=void 0,this.subExpressions=void 0,this.evalFunc=void 0,this.props=void 0,this.typeName=t,this.rawExpression=n,this.subExpressions=r,this.evalFunc=a,this.props=i}return s(e,[{key:"eval",value:function(e){return this.evalFunc(e,this)}}]),e}(),l=function(){function e(t){o(this,e),this.typeName=void 0,this.regex=void 0,this.globalRegex=void 0,this.parseFunc=void 0,this.evalFunc=void 0,this.numOperands=void 0,this.sample=void 0,this.description=void 0,this.typeName=t.typeName,this.regex=t.regex;var n=t.regex.flags?"".concat(t.regex.flags,"g"):"g";this.globalRegex=new RegExp(t.regex.source,n),this.parseFunc=t.parseFunc,this.evalFunc=t.evalFunc,this.numOperands=t.numOperands||0,this.sample=t.sample,this.description=t.description}return s(e,[{key:"create",value:function(e,t,n){if(this.numOperands&&t.length!==this.numOperands)throw Error('Invalid syntax in "'.concat(e,'": ').concat(this.typeName," expected ").concat(this.numOperands," operands but got ").concat(t.length));var r=this.parseFunc(n,t);return new u(this.typeName,e,t,this.evalFunc,r)}}]),e}(),c=Math.random,h={NoPF:function(){return{}},sum:function(e){return e.reduce((function(e,t){return e+t}),0)},roll:function(e){return Math.floor(c()*e)+1}},f=h.NoPF,p=h.sum,d=h.roll;function v(e,t,n,r,a,o){return new l({typeName:e,regex:n,numOperands:2,parseFunc:r,evalFunc:a,description:o,sample:t})}var m=function(e,t){if(!t.includes(e.typeName))throw Error('Type of "'.concat(e.rawExpression,'" was expected to be one of "').concat(t,'", but was "').concat(e.typeName,'"'));return e.typeName},b=[v("Discard",";",/;/,f,(function(e,t){return void t.subExpressions[0].eval(e)||t.subExpressions[1].eval(e)}),"The result of the left operand is discarded (though is still evaluated, so variables and functions will be assigned); output is the result of the right operand. Can be useful after assignment when the assigned value should not be immediately added."),v("Assign",":=",/:=/,(function(e,t){return{storedType:m(t[0],["Variable","Function"])}}),(function(e,t){if("Function"===t.props.storedType){var n,r=null===(n=t.subExpressions[0].props)||void 0===n?void 0:n.funcName;e.funcReg.set(r,t.subExpressions[1])}else if("Variable"===t.props.storedType){var a,o=null===(a=t.subExpressions[0].props)||void 0===a?void 0:a.varName,i=t.subExpressions[1].eval(e);e.varReg.set(o,i)}return 0}),'Assign value to variable or sub expression to function. Output is 0.\n\nFor example:\n  $a := 1d6\nIn the above, the outcome of the 1d6 roll will be assigned to $a for later use. This can be useful in cases where you need to know the outcome of an earlier attack, such as whether you\'ve already used your sneak attack for the turn:\n  ($a := (3+PB =atk> 1D6+3 + 1D6)) + (3+PB =atk> 1D6 + ($a<=0 => 1D6))\n\nCan also assign a sub expression as a function:\n  @a := 3+PB =atk> 1D6+3\nIn the above, the attack sub expression is assigned to $a for later use. Each time it is used later, it will be re-evaluated (dice will be rolled again):\n  (@a := 1D6+3); (3+PB =atk> @a) + (5+PB =atk> @a)\n\nThese can be combined to useful effect; for example, effects that can only\nhappen once per turn, but have multiple opportunities to happen, like sneak attack:\n  @sa := !$sd => ($sd=1D6); (3+PB =atk> 1D6+3 + @sa) + (3+PB =atk> 1D6 + @sa)\nThe above defines a function "@sa" (sneak attack) that will roll 1D6, and assign the result to "$sd" (sneak damage); but only if "$sd" is a not ("!") zero (i.e. has already been rolled). The ";" separates it from the rest of the expression. Then "@sd" can be inserted anywhere the sneak attack could occur (on any attack hit). Note that this method will mean that the sneak attack always occurs on the first attack that hits.'),v("Assign (and Evaluate)","=",/(?<![=<>!:&|])=(?![=>a-zA-Z])/,(function(e,t){return{storedType:m(t[0],["Variable","Function"])}}),(function(e,t){if("Function"===t.props.storedType){var n,r,a=null===(n=t.subExpressions[0].props)||void 0===n?void 0:n.funcName;return e.funcReg.set(a,t.subExpressions[1]),(null===(r=e.funcReg.get(a))||void 0===r?void 0:r.eval(e))||0}if("Variable"===t.props.storedType){var o,i=null===(o=t.subExpressions[0].props)||void 0===o?void 0:o.varName,s=t.subExpressions[1].eval(e);return e.varReg.set(i,s),s}return 0}),'Assign value to variable or sub expression to function. Output is the result of evaluating the assigned expression. This is the same as ":=", except for the output. NOTE this means that any assigned function will be evaluatedimmediately, and any variables changed as part of the function will be changed when it is immediately evaluated!'),v("Check","=>",/=>/,f,(function(e,t){return t.subExpressions[0].eval(e)?t.subExpressions[1].eval(e):0}),"If left operand is non-zero, then output the right operand, otherwise output 0. For example:\n  (1d20 <= 11) => 1d8"),v("Attack","=atk>",/=atk(?::(\d+))?(?::(adv|dis)(\d+)?)?>/,(function(e){return{critmin:Number(e[1]||20),vantage:(t=e[2],n=e[3],"adv"===t?Number(n||2):"dis"===t?-Number(n||2):0)};var t,n}),(function(e,t){var n=t.props,r=t.subExpressions,o=d(20);if(n.vantage>1||n.vantage<-1){var i=function(e,t,n){if(void 0===t&&(t=e,e=0),void 0===n&&(n=1),n>0&&e>=t||n<0&&e<=t)return[];for(var r=[],a=e;n>0?a<t:a>t;a+=n)r.push(a);return r}(Math.abs(n.vantage)-1).map((function(){return d(20)}));o=(n.vantage>0?Math.max:Math.min).apply(void 0,[o].concat(a(i)))}var s=1===o,u=o>=n.critmin;if(!s&&(u||r[0].eval(e)+o>=e.ac)){e.pushCrit(u);var l=r[1].eval(e);return e.popCrit(),l}return 0}),"Make an attack. The left operand will be added to the d20 roll, and if the result meets the AC then the output is the right operand. For example:\n  3+PB =atk> 1D6+3\nThe above is mostly equivalent to:\n  (3+PB + 1d20 >= AC) => 1D6+3\nHowever, the =atk> operator also accounts for crits. If the d20 rolled for the attack is a 1, then the attack will miss regardless of modifiers and AC. If the d20 rolled for the attack is a 20, then the critical hit flag is set (the number of dice rolled in the 1D6 damage roll will then be doubled; note that the doubling of dice only applies when the uppercase D is used; using a lowercase d will not double dice).\n\nCan also specify that the attack be made with advantage or disadvantage:\n  3+PB =atk:adv> 1D6+3\n  3+PB =atk:dis> 1D6+3\nOr even super advantage or disadvantage:\n  3+PB =atk:adv3> 1D6+3\n  3+PB =atk:dis3> 1D6+3\n\nCan also specify the minimum critical hit threshold, for example if you can crit on a 19:\n  3+PB =atk:19> 1D6+3\n\nNote that if you specify both adv/dis and crit threshold, the crit threshold should come first:\n3+PB =atk:19:dis> 1D6+3"),v("Save","=sav>",/=sav:(\d+)(?::(adv|dis))?>/,(function(e){var t;return{successmod:null!==(t=Number(e[1])/100)&&void 0!==t?t:.5,vantage:e[2]}}),(function(e,t){var n=d(20);"adv"===t.props.vantage?n=Math.max(n,d(20)):"dis"===t.props.vantage&&(n=Math.min(n,d(20)));var r=t.subExpressions[1].eval(e);return n+e.sm>=t.subExpressions[0].eval(e)?Math.floor(r*t.props.successmod):r}),"Have the target make a saving throw. The left operand is the difficulty class (DC) of the save; if the target save (1d20 + SM) does not meet the DC, then the output will be the right operand. Otherwise, if the target save does meet the DC, then the output will be half the right operand. For example:\n  8+3+PB =sav> 3d8\nThe above is equivalent to:\n  ($s := 1d20 + SM) + ($s < 8+3+PB => 3d8) + ($s >= 8+3+PB => 3d8/2)\n\nCan also specify that the save be made with advantage or disadvantage:\n  8+3+PB =sav:adv> 3d8\n  8+3+PB =sav:dis> 3d8\n\nCan also specify the output modifier for save success, for example if suceeding on the save results in no damage being taken:\n  8+3+PB =sav:0> 3d8\nNote the the success modifier is specified as a positive integer percentage, so a value of 25 would mean that the damage is quartered.\n\nNote that if you specify both adv/dis and success modifier, the success modifier should come first:\n  8+3+PB =sav:0:adv> 3d8"),v("Or","||",/\|\|/,f,(function(e,t){return t.subExpressions[0].eval(e)||t.subExpressions[1].eval(e)}),"Outputs the second operand if the first is 0, otherwise outputs the first operand."),v("And","&&",/&&/,f,(function(e,t){return t.subExpressions[0].eval(e)&&t.subExpressions[1].eval(e)}),"Outputs the second operand if the first is non-zero, otherwise outputs 0"),v("Greater Than Or Equal To",">=",/>=/,f,(function(e,t){return Number(t.subExpressions[0].eval(e)>=t.subExpressions[1].eval(e))}),"Outputs 1 if the left operand is greater than or equal to the right operand, otherwise 0."),v("Greater Than",">",/(?<!=)>(?!=)/,f,(function(e,t){return Number(t.subExpressions[0].eval(e)>t.subExpressions[1].eval(e))}),"Outputs 1 if the left operand is greater than the right operand, otherwise 0."),v("Less Than Or Equal To","<=",/<=/,f,(function(e,t){return Number(t.subExpressions[0].eval(e)<=t.subExpressions[1].eval(e))}),"Outputs 1 if the left operand is less than or equal to the right operand, otherwise 0."),v("Less Than","<",/(?<!=)<(?!=)/,f,(function(e,t){return Number(t.subExpressions[0].eval(e)<t.subExpressions[1].eval(e))}),"Outputs 1 if the left operand is less than the right operand, otherwise 0."),v("Not Equal To","!=",/!=(?!>)/,f,(function(e,t){return Number(t.subExpressions[0].eval(e)!==t.subExpressions[1].eval(e))}),"Outputs 1 if the left operand is not equal to the right operand, otherwise 0."),v("Equal To","==",/==(?!>)/,f,(function(e,t){return Number(t.subExpressions[0].eval(e)===t.subExpressions[1].eval(e))}),"Outputs 1 if the left operand is equal to the right operand, otherwise 0."),v("Add","+",/\+/,f,(function(e,t){return p(t.subExpressions.map((function(t){return t.eval(e)})))}),"Outputs the sum of the left operand and right operand"),v("Subtract","-",/(?<![-+*/=><|&])-(?!>)/,f,(function(e,t){return t.subExpressions[0].eval(e)-p(t.subExpressions.slice(1).map((function(t){return t.eval(e)})))}),"Outputs the result of subtracting the right operand from the left operand."),v("Multiply","*",/\*/,f,(function(e,t){return t.subExpressions.reduce((function(t,n){return t*n.eval(e)}),1)}),"Outputs the result of multiplying the left operand by the right operand."),v("Divide","/",/\//,f,(function(e,t){return Math.floor(t.subExpressions[0].eval(e)/t.subExpressions[1].eval(e))}),"Outputs the result of dividing the left operand by the right oeprand. Decimal results are rounded down the nearest whole integer."),v("Repeat","#",/#/,f,(function(e,t){return p(a(new Array(Number(t.subExpressions[0].eval(e)))).map((function(){return t.subExpressions[1].eval(e)})))}),"Outputs the sum of repeating evaluation of the right operand a number of times equal to the left operand."),v("Reroll (If Less Than Or Equal To)","@rrlte:",/@rrlte:/,(function(){throw new Error("@rrlte: has been removed; use the 2d6rrle2 syntax instead")}),(function(){throw new Error("@rrlte: has been removed; use the 2d6rrle2 syntax instead")}),"")],g=h.NoPF;function y(e,t,n,r,a,o){return new l({typeName:e,regex:n,numOperands:1,parseFunc:r,evalFunc:a,description:o,sample:t})}var w=[y("Not","!",/^!/,g,(function(e,t){return t.subExpressions[0].eval(e)?0:1}),"Outputs 0 if the right operand is non-zero, otherwise outputs 1."),y("Negative","-",/^-/,g,(function(e,t){return-1*t.subExpressions[0].eval(e)}),"Flips the sign of the right operand (multiply by -1).")],x=h.NoPF,k=h.sum,E=h.roll;function O(e,t,n,r,a,o){return new l({typeName:e,regex:n,parseFunc:r,evalFunc:a,description:o,sample:t})}var N={kh:function(e,t){return e.sort((function(e,t){return t-e})).slice(0,t)},kl:function(e,t){return e.sort((function(e,t){return e-t})).slice(0,t)},rrle:function(e,t,n){return e.forEach((function(e,r,a){e<=t&&(a[r]=E(n))}))},rrlt:function(e,t,n){return e.forEach((function(e,r,a){e<t&&(a[r]=E(n))}))},rrge:function(e,t,n){return e.forEach((function(e,r,a){e>=t&&(a[r]=E(n))}))},rrgt:function(e,t,n){return e.forEach((function(e,r,a){e>t&&(a[r]=E(n))}))},rreq:function(e,t,n){return e.forEach((function(e,r,a){e===t&&(a[r]=E(n))}))}},T=Object.keys(N).join("|"),D=[O("Number","X",/^\d+$/,(function(e){return{value:Number(e[0])}}),(function(e,t){return t.props.value}),"Where X is any positive integer. Outputs the value of the integer."),O("Roll Dice","XdY",new RegExp("^(\\d*)([dD])(\\d+)((?:(?:".concat(T,")\\d+)*)$")),(function(e){return{crittable:"D"===e[2],dieSize:Number(e[3]),numDice:Number(e[1]||1),operations:a(e[4].matchAll(/([a-zA-Z]+)(\d+)/g)).map((function(e){return{operation:e[1],param:Number(e[2])}}))}}),(function(e,t){for(var n=t.props,r=n.crittable,a=n.dieSize,o=n.numDice,i=n.operations,s=[],u=r&&e.crit()?2*o:o,l=0;l<u;l+=1)s.push(E(a));return i.forEach((function(e){var t=e.operation,n=e.param;s=N[t](s,n,a)||s})),k(s)}),'Where X and Y are any positive integers. Outputs the sum of rolls with a dice of size Y rolled X number of times. For example:\n  3d8\nIn the above, an 8 sided dice will be rolled 3 times, and the output will be the sum of the results.\n\nCritical hits can be accounted for with an uppercase D to double the number of dice rolled on a critical hit:\n  3D8\nIn the above, if the critical hit flag is set  (in the right operand of an Attack where the attack roll was >= to the critical threshold), then an 8 sided dice will be rolled 6 times.\n\nCan also append additional modifier operations after the above basic rolls, such as "keep highest":\n  3d8kh2\nThe above rolls 3 d8s, and keeps the two highest rolls. To simulate the "Great Weapon Fighting Style" you could instead use rrle:\n  2D6rrle2\nWhich rolls 2 d6s (or 4 on a crit), and rerolls any 1s and 2s. Any number of these operations can be appended, such as:\n  4d6kl2rrle2kh1\nWhich rolls 4 d6s, then keeps the lowest 2, then rerolls any of the remaining 2 that are 2 or less, then keeps the highest 1 of those remaining 2.\n\nThe available modifier operations (where X is any positive integer) are:\n  khX: Keep the highest X dice\n  klX: Keep the lowest X dice\n  rrleX: Reroll (only once) any dice that are less than or equal to X\n  rrltX: Reroll (only once) any dice that are less than X\n  rrgeX: Reroll (only once) any dice that are greater than or equal to X\n  rrgtX: Reroll (only once) any dice that are greater than X\n  rreqX: Reroll (only once) any dice that are equal to X\n'),O("Armor Class","AC",/^AC$/,x,(function(e,t){return e.ac}),"Outputs the armor class of the target the simulation is being run against."),O("Save Modifier","SM",/^SM$/,x,(function(e,t){return e.ac}),"Outputs the save modifier of the target the simulation is being run against."),O("Proficiency Bonus","PB",/^PB$/,x,(function(e,t){return e.pb}),"Outputs the proficiency bonus for the level of the character build."),O("Level","LV",/^LV$/,x,(function(e,t){return e.level}),"Outputs the level of the character build."),O("Critical Multiplier","CM",/^CM$/,x,(function(e,t){return 1*Number(e.crit())+1}),"Outputs 2 if critical flag is set (in the right operand of an Attack where   the attack roll was >= to the critical threshold), otherwise 1."),O("Critical Binary","CB",/^CB$/,x,(function(e,t){return 1*Number(e.crit())}),"Outputs 1 if critical flag is set (in the right operand of an Attack where the attack roll was >= to the critical threshold), otherwise 0."),O("Variable","$X",/^\$([a-zA-Z]+)$/,(function(e){return{varName:e[1]}}),(function(e,t){return e.varReg.get(t.props.varName)||0}),"Where X is a string of alphanumeric characters. A variable that can be stored and retrieved. Outputs the value of the variable, which starts as 0. For example:\n  $a := 1d6\nIn the above, the outcome of the 1d6 roll will be assigned to $a for later use. This can be useful in cases where you need to know the outcome of an earlier attack, such as whether you've already used your sneak attack for the turn:\n  ($a := (3+PB =atk> 1D6+3 + 1D6)) + (3+PB =atk> 1D6 + ($a<=0 => 1D6)) + $a"),O("Function","@X",/^@([a-zA-Z]+)$/,(function(e){return{funcName:e[1]}}),(function(e,t){var n;return(null===(n=e.funcReg.get(t.props.funcName))||void 0===n?void 0:n.eval(e))||0}),"Where X is a string of alphanumeric characters. A function that can be assigned a sub expression and then later evaluated. Outputs the result of evaluating the sub expression (any dice rolls will be rerolled each time), or 0 if an expression has not yet been assigned. For example:\n  @a := 3+PB =atk> 1D6+3\nIn the above, the attack sub expression is assigned to $a for later use. Each time it is used later, it will be re-evaluated (dice will be rolled again). This can be useful in cases where you want to evaluate the same thing multiple times, like sneak attack after each attack:\n  (@sa := $sd<=0 => ($sd:=1D6)+$sd) + (3+PB =atk> 1D6+3 + @sa) + (3+PB =atk> 1D6 + @s) + $sd")],P=[].concat(a(b),a(w));function A(e,t){for(var n=0;n<e.length;n++)if(e[n].index===t)return e[n];return null}function B(e,t,n){1===n&&t.startsWith("(")&&t.endsWith(")")&&(t=t.substring(1,t.length-1)),e.push(t)}function F(e,t){var n=a(e.matchAll(t.globalRegex));if(!n.length)return[[],null,0];for(var r=[],o=0,i="",s=0,u=null,l=0;l<e.length;){var c=e[l];"("===c?o+=1:")"===c&&0===(o-=1)&&(s+=1),0===o&&!u&&(2!==t.numOperands||l>0)&&(u=A(n,l))?(B(r,i,s),i="",s=0,l+=u[0].length):(i+=c,l+=1)}if(0!==o)throw Error('Unbalanced parentheses in expression "'.concat(e,'"'));return B(r,i,s),[r.filter(Boolean),u,s]}function $(e){var t,a=r(P);try{for(a.s();!(t=a.n()).done;){var o=t.value,i=n(F(e,o),3),s=i[0],u=i[1],l=i[2];if(1===s.length&&1===l&&e.startsWith("(")&&e.endsWith(")"))return $(s[0]);if(u&&s.length===o.numOperands)return o.create(e,s.map($),u)}}catch(d){a.e(d)}finally{a.f()}var c,h=r(D);try{for(h.s();!(c=h.n()).done;){var f=c.value,p=f.regex.exec(e);if(p)return f.create(e,[],p)}}catch(d){h.e(d)}finally{h.f()}throw Error('Invalid expression: "'.concat(e,'"'))}var S=function(){function e(t){o(this,e),this.ac=void 0,this.level=void 0,this.pb=void 0,this.sm=void 0,this.critStack=void 0,this.funcReg=void 0,this.varReg=void 0,this.ac=t.ac,this.sm=t.sm,this.pb=t.pb,this.level=t.level,this.varReg=new Map,this.funcReg=new Map,this.critStack=[]}return s(e,[{key:"crit",value:function(){return!!this.critStack[this.critStack.length-1]}},{key:"popCrit",value:function(){this.critStack.pop()}},{key:"pushCrit",value:function(e){this.critStack.push(e)}},{key:"reset",value:function(){this.critStack.length=0,this.funcReg.clear(),this.varReg.clear()}}]),e}();function C(e,t){return C=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},C(e,t)}function R(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&C(e,t)}function M(e){return M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},M(e)}function X(e){return X="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},X(e)}function I(e,t){if(t&&("object"===X(t)||"function"===typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function q(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=M(e);if(t){var a=M(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return I(this,n)}}var j,z,W=function(){function e(t,n){o(this,e),this.rawExpression=void 0,this.rootExpression=void 0,this.rawExpression=t,this.rootExpression=n}return s(e,[{key:"run",value:function(e){return this.rootExpression.eval(e)}}]),e}(),V=function(){function e(t){o(this,e),this.map=void 0,this.sumTotal=void 0,this.map=new Map(t),this.sumTotal=(t||[]).reduce((function(e,t){return e+n(t,2)[1]}),0)}return s(e,[{key:"uniqueCount",value:function(){return this.map.size}},{key:"totalCount",value:function(){return this.sumTotal}},{key:"entries",value:function(){return a(this.map.entries())}},{key:"uniqueValues",value:function(){return a(this.map.keys())}}],[{key:"merge",value:function(){for(var t=new e,n=t.map,r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return a.forEach((function(e){e.map.forEach((function(e,t){return n.set(t,(n.get(t)||0)+e)})),t.sumTotal+=e.sumTotal})),t}}]),e}(),_=function(e){R(n,e);var t=q(n);function n(){return o(this,n),t.apply(this,arguments)}return s(n,[{key:"increment",value:function(e){this.map.set(e,(this.map.get(e)||0)+1),this.sumTotal+=1}},{key:"toImmutable",value:function(){return new V(this.entries())}}]),n}(V);onmessage=function(e){var t=e.data;if("configure"===t.command){var n=t.expression,r=t.config;j=new W(n,$(n)),z=r}else if("run"===t.command){var a=function(e){if(!j||!z)throw new Error("Worker is not configured!");for(var t=new _,n=new S(z),r=0;r<e;r++)n.reset(),t.increment(j.run(n));return t.toImmutable()}(t.iterations);this.postMessage({command:"complete",distribution:a})}}}();
//# sourceMappingURL=644.7b99e52c.chunk.js.map